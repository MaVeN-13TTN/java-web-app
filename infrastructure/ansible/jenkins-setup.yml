---
- name: Install and Configure Jenkins
  hosts: jenkins
  become: yes
  vars:
    jenkins_plugins:
      - git
      - github
      - github-branch-source
      - github-api
      - github-oauth
      - github-pullrequest
      - github-scm-trait-notification-context
      - generic-webhook-trigger
      - credentials
      - credentials-binding
  
  # Import GitHub credentials from the encrypted vault file
  vars_files:
    - vars/github_credentials.yml
  
  tasks:
    - name: Check if system is Amazon Linux
      command: grep -q "Amazon Linux" /etc/os-release
      register: is_amazon_linux
      ignore_errors: yes
      changed_when: false

    - name: Install required Python modules for package management
      raw: |
        if command -v yum &>/dev/null; then
          if command -v dnf &>/dev/null; then
            yum install -y python3-dnf
          else
            yum install -y python3-yum
          fi
        fi
      register: python_dep_install
      changed_when: "'Nothing to do' not in python_dep_install.stdout|default('')"
      ignore_errors: yes

    - name: Update packages with dnf
      dnf:
        name: '*'
        state: latest
        update_only: yes
      when: ansible_os_family == "RedHat" and ansible_pkg_mgr == "dnf"
      ignore_errors: yes

    - name: Update packages with yum
      yum:
        name: '*'
        state: latest
        update_only: yes
      when: ansible_os_family == "RedHat" and ansible_pkg_mgr == "yum"
      ignore_errors: yes

    # Install Java 17 on Amazon Linux 2023
    - name: Install Java 17 on Amazon Linux 2023
      package:
        name:
          - java-17-amazon-corretto
          - java-17-amazon-corretto-devel
        state: present
      when: is_amazon_linux.rc == 0

    # Java installation for other RedHat systems
    - name: Install Java 17 on other RedHat systems
      package:
        name: java-17-openjdk-devel
        state: present
      when: is_amazon_linux.rc != 0 and ansible_os_family == "RedHat"

    # Display installed Java version for validation
    - name: Check installed Java version
      command: java -version
      register: java_version
      changed_when: false
    
    - name: Display installed Java version
      debug:
        var: java_version.stderr

    - name: Add Jenkins repository
      get_url:
        url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
        dest: /etc/yum.repos.d/jenkins.repo

    - name: Import Jenkins repository key
      rpm_key:
        state: present
        key: https://pkg.jenkins.io/redhat-stable/jenkins.io.key

    - name: Install Jenkins
      package:
        name: jenkins
        state: present
        disable_gpg_check: yes
      when: ansible_os_family == "RedHat"

    - name: Install Maven
      package:
        name: maven
        state: present
      when: ansible_os_family == "RedHat"

    - name: Start and enable Jenkins service
      systemd:
        name: jenkins
        state: started
        enabled: yes

    - name: Verify Jenkins process is running
      command: systemctl status jenkins
      register: jenkins_status
      changed_when: false

    - name: Wait for Jenkins to start
      uri:
        url: http://localhost:8080/
        status_code: [200, 403]
      register: result
      until: result.status in [200, 403]
      retries: 30
      delay: 10

    - name: Get Jenkins admin password
      command: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: jenkins_admin_password
      changed_when: false
      
    - name: Install Jenkins CLI
      get_url:
        url: "http://localhost:8080/jnlpJars/jenkins-cli.jar"
        dest: "/tmp/jenkins-cli.jar"
        mode: '0644'
        
    - name: Install Jenkins plugins individually
      command: >
        java -jar /tmp/jenkins-cli.jar -s http://localhost:8080/ -auth admin:{{ jenkins_admin_password.stdout }} 
        install-plugin {{ item }} -deploy
      loop: "{{ jenkins_plugins }}"
      register: plugin_result
      failed_when: plugin_result.rc != 0 and 'already installed' not in plugin_result.stderr|default('')
      changed_when: "'Installing' in plugin_result.stdout|default('')"
      retries: 3
      delay: 10
      until: plugin_result is success or ('already installed' in plugin_result.stderr|default(''))
      notify: Restart Jenkins
      
    - name: Create GitHub webhook credentials
      shell: |
        cat > /tmp/create_credential.groovy << EOF
        import jenkins.model.*
        import com.cloudbees.plugins.credentials.*
        import com.cloudbees.plugins.credentials.common.*
        import com.cloudbees.plugins.credentials.domains.*
        import com.cloudbees.plugins.credentials.impl.*
        import org.jenkinsci.plugins.plaincredentials.impl.*
        
        def domain = Domain.global()
        def store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
        
        // Get credentials from environment variables or use default values for testing
        def githubUsername = System.getenv('GITHUB_USERNAME') ?: 'placeholder-username'
        def githubToken = System.getenv('GITHUB_TOKEN') ?: 'placeholder-token'
        
        // Create credentials using values from environment variables
        def githubCredentials = new UsernamePasswordCredentialsImpl(
          CredentialsScope.GLOBAL,
          'github-credentials',
          'GitHub access',
          githubUsername,
          githubToken
        )
        
        store.addCredentials(domain, githubCredentials)
        EOF
        
        # Export GitHub credentials as environment variables before running the script
        export GITHUB_USERNAME="{{ github_username | default('placeholder-username') }}"
        export GITHUB_TOKEN="{{ github_token | default('placeholder-token') }}"
        
        java -jar /tmp/jenkins-cli.jar -s http://localhost:8080/ -auth admin:{{ jenkins_admin_password.stdout }} groovy = < /tmp/create_credential.groovy
        rm -f /tmp/create_credential.groovy
        
        # Create a marker file to indicate credentials have been set up
        mkdir -p /var/lib/jenkins/.ssh
        touch /var/lib/jenkins/.ssh/github_credentials_created
      args:
        creates: /var/lib/jenkins/.ssh/github_credentials_created
      notify: Restart Jenkins
        
  handlers:
    - name: Restart Jenkins
      systemd:
        name: jenkins
        state: restarted
